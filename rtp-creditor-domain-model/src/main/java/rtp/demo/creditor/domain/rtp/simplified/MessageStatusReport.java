package rtp.demo.creditor.domain.rtp.simplified;

import java.math.BigDecimal;
import java.time.LocalDateTime;

/*
 * Examples of fields found on the RTP Message Status Report. For demo use only.
 * 
 * The Message Status Report (pacs.002) is used to provide a real time response to all Payment
 * Related Messages. The pacs.002 will confirm that the message has been received and whether
 * or not it passed business validation. 
 * 
 * Refer to RTP documentation at: https://www.theclearinghouse.org/payment-systems/rtp/-/media/a211f4af08cb4a298e2909f71a2563e3.ashx
 */
public class MessageStatusReport {

	// Unique ID for message status report message, set by Creditor FI
	// Format: MYYYYMMDDbbbbbbbbbbbBAAAnnnnnnnnnnn
	// Pos. 01-01 - Prefix "M"
	// Pos. 02-09 - File creation date in format YYYYMMDD
	// Pos. 10-20 - FI Identifier (11 digit Participant ID)
	// Pos. 21-21 - Message generation source ("B" if generated by a TCH FI)
	// Pos. 22-24 - Alphabetic serial identifier (3 alphabetic characters)
	// Pos. 25-35 - Message serial number (11 numeric characters)
	// Example: M2015111202120020101BRRR00000000001
	// XML Location: GrpHdr.MsgId
	private String messageStatusReportId;

	// Date and time at which the message was created, Eastern Time
	// Format: YYYY-MM-DDThh:mm:ss
	// Example: 2015-11-12T10:05:00
	// XML Location: GrpHdr.CreDtTm
	private LocalDateTime creationDateTime;

	// The Original ID of the Credit Transfer Message
	// Example: M2015111202120020101BFFF00000000001
	// XML Location: OrgnlGrpInfAndSts.OrgnlMsgId
	private String originalMessageId;

	// The Payment Instruction Identification on the original Credit Transfer
	// Message
	// Example: 2015111502120020101BFFFF00000000001
	// XML Location: TxInfAndSts.OrgnlInstrId
	private String originalPaymentInstructionId;

	// This is the customer reference assigned to the transaction. The E2E
	// identification must be passed on throughout the entire payment chain without
	// being changed.
	// Example: E2E-Ref001
	// XML Location: CdtTrfTxInf.PmtId.EndToEndId
	private String endToEndId;

	// The total amount that the Debtor FI is obligated to pay the Creditor FI upon
	// the Creditor FIâ€™s acceptance of the payment instructed by the Credit Transfer
	// (pacs.008) message.
	// Example: 525.25
	// Rule: Reject if the value of the request is less than or equal to zero
	// XML Location: GrpHdr.TtlIntrBkSttlmAmt
	private BigDecimal paymentAmount;

	// Type of currency for the payment transaction
	// Example: USD
	// Rule: Only Currency supported by RTP is US Dollar
	// XML Location: GrpHdr.TtlIntrBkSttlmAmt
	private String paymentCurrency;

	// Specifies the type of the original message, to which this pacs.002 message is
	// a response
	// Example: pacs.008.001.06
	// Note: pacs.008.001.06 indicates a Credit Transfer Message
	// XML Location: OrgnlGrpInfAndSts.OrgnlMsgNmId
	private String originalMessageType;

	// This date is referring to the original Credit Transfer. The date is required
	// to be set to Eastern Time (ET).
	// Example: 2015-11-12T10:05:00
	// XML Location: OrgnlGrpInfAndSts.OrgnlCreDtTm
	private LocalDateTime originalMessageCreationDateTime;

	// Number of individual transactions contained in the original message.
	// Example: 1
	// XML Location: OrgnlGrpInfAndSts.OrgnlNbOfTxs
	private Integer originalNumberOfTransactions;

	// The result status after processing the Credit Transfer Message: ACTC, ACWP,
	// or RJCT
	// ACTC - Accept - Payment has been Accepted
	// ACWP - Accept Without Posting - Payment instruction is Accepted without being
	// Posted to the Creditor Customers account.
	// RJCT - Reject - Payment or Payment Related Message has been rejected.
	// XML Location: TxInfAndSts.TxSts
	private String transactionStatus;

	// Reason for the status, only present if the transaction status is RJCT
	// Example: RC03
	// XML Location: TxInfAndSts.StsRsnInf.Rsz.Cd
	private String rejectReasonCode;

	// Point in time when the instruction from the Instructing Agent (Debtor FI) has
	// been accepted by the Instructed Agent (Creditor FI), Eastern Time.
	// Format: YYYY-MM-DDThh:mm:ss
	// Example: 2015-11-12T10:05:10
	// XML Location: TxInfAndSts.AccptncDtTm
	private LocalDateTime acceptanceDateTime;

	// Identification of the Instructed Agent (Debtor FI) for this Message Status
	// Report of Credit Transfer (pacs.002) message.
	// Format: 9 digit Routing and Transit Number.
	// Example: 021200201
	// XML Location: TxInfAndSts.InstgAgt.FinInstnId.ClrSysMmbId.MmbId
	private String debtorId;

	// Identification of the Creditor FI.
	// Format: 9 digit Routing and Transit Number
	// Example: 020010001
	// XML Location: CdtTrfTxInf.InstdAgt.FinInstnId.ClrSysMmbId.MmbId
	private String creditorId;

	public String getMessageStatusReportId() {
		return messageStatusReportId;
	}

	public void setMessageStatusReportId(String messageStatusReportId) {
		this.messageStatusReportId = messageStatusReportId;
	}

	public LocalDateTime getCreationDateTime() {
		return creationDateTime;
	}

	public void setCreationDateTime(LocalDateTime creationDateTime) {
		this.creationDateTime = creationDateTime;
	}

	public BigDecimal getPaymentAmount() {
		return paymentAmount;
	}

	public void setPaymentAmount(BigDecimal paymentAmount) {
		this.paymentAmount = paymentAmount;
	}

	public String getPaymentCurrency() {
		return paymentCurrency;
	}

	public void setPaymentCurrency(String paymentCurrency) {
		this.paymentCurrency = paymentCurrency;
	}

	public String getOriginalMessageId() {
		return originalMessageId;
	}

	public void setOriginalMessageId(String originalMessageId) {
		this.originalMessageId = originalMessageId;
	}

	public String getOriginalPaymentInstructionId() {
		return originalPaymentInstructionId;
	}

	public void setOriginalPaymentInstructionId(String originalPaymentInstructionId) {
		this.originalPaymentInstructionId = originalPaymentInstructionId;
	}

	public String getOriginalMessageType() {
		return originalMessageType;
	}

	public void setOriginalMessageType(String originalMessageType) {
		this.originalMessageType = originalMessageType;
	}

	public LocalDateTime getOriginalMessageCreationDateTime() {
		return originalMessageCreationDateTime;
	}

	public void setOriginalMessageCreationDateTime(LocalDateTime originalMessageCreationDateTime) {
		this.originalMessageCreationDateTime = originalMessageCreationDateTime;
	}

	public Integer getOriginalNumberOfTransactions() {
		return originalNumberOfTransactions;
	}

	public void setOriginalNumberOfTransactions(Integer originalNumberOfTransactions) {
		this.originalNumberOfTransactions = originalNumberOfTransactions;
	}

	public String getTransactionStatus() {
		return transactionStatus;
	}

	public void setTransactionStatus(String transactionStatus) {
		this.transactionStatus = transactionStatus;
	}

	public String getRejectReasonCode() {
		return rejectReasonCode;
	}

	public void setRejectReasonCode(String rejectReasonCode) {
		this.rejectReasonCode = rejectReasonCode;
	}

	public LocalDateTime getAcceptanceDateTime() {
		return acceptanceDateTime;
	}

	public void setAcceptanceDateTime(LocalDateTime acceptanceDateTime) {
		this.acceptanceDateTime = acceptanceDateTime;
	}

	public String getDebtorId() {
		return debtorId;
	}

	public void setDebtorId(String debtorId) {
		this.debtorId = debtorId;
	}

	public String getCreditorId() {
		return creditorId;
	}

	public void setCreditorId(String creditorId) {
		this.creditorId = creditorId;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((acceptanceDateTime == null) ? 0 : acceptanceDateTime.hashCode());
		result = prime * result + ((creationDateTime == null) ? 0 : creationDateTime.hashCode());
		result = prime * result + ((creditorId == null) ? 0 : creditorId.hashCode());
		result = prime * result + ((debtorId == null) ? 0 : debtorId.hashCode());
		result = prime * result + ((messageStatusReportId == null) ? 0 : messageStatusReportId.hashCode());
		result = prime * result
				+ ((originalMessageCreationDateTime == null) ? 0 : originalMessageCreationDateTime.hashCode());
		result = prime * result + ((originalMessageId == null) ? 0 : originalMessageId.hashCode());
		result = prime * result + ((originalMessageType == null) ? 0 : originalMessageType.hashCode());
		result = prime * result
				+ ((originalNumberOfTransactions == null) ? 0 : originalNumberOfTransactions.hashCode());
		result = prime * result
				+ ((originalPaymentInstructionId == null) ? 0 : originalPaymentInstructionId.hashCode());
		result = prime * result + ((paymentAmount == null) ? 0 : paymentAmount.hashCode());
		result = prime * result + ((paymentCurrency == null) ? 0 : paymentCurrency.hashCode());
		result = prime * result + ((rejectReasonCode == null) ? 0 : rejectReasonCode.hashCode());
		result = prime * result + ((transactionStatus == null) ? 0 : transactionStatus.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		MessageStatusReport other = (MessageStatusReport) obj;
		if (acceptanceDateTime == null) {
			if (other.acceptanceDateTime != null)
				return false;
		} else if (!acceptanceDateTime.equals(other.acceptanceDateTime))
			return false;
		if (creationDateTime == null) {
			if (other.creationDateTime != null)
				return false;
		} else if (!creationDateTime.equals(other.creationDateTime))
			return false;
		if (creditorId == null) {
			if (other.creditorId != null)
				return false;
		} else if (!creditorId.equals(other.creditorId))
			return false;
		if (debtorId == null) {
			if (other.debtorId != null)
				return false;
		} else if (!debtorId.equals(other.debtorId))
			return false;
		if (messageStatusReportId == null) {
			if (other.messageStatusReportId != null)
				return false;
		} else if (!messageStatusReportId.equals(other.messageStatusReportId))
			return false;
		if (originalMessageCreationDateTime == null) {
			if (other.originalMessageCreationDateTime != null)
				return false;
		} else if (!originalMessageCreationDateTime.equals(other.originalMessageCreationDateTime))
			return false;
		if (originalMessageId == null) {
			if (other.originalMessageId != null)
				return false;
		} else if (!originalMessageId.equals(other.originalMessageId))
			return false;
		if (originalMessageType == null) {
			if (other.originalMessageType != null)
				return false;
		} else if (!originalMessageType.equals(other.originalMessageType))
			return false;
		if (originalNumberOfTransactions == null) {
			if (other.originalNumberOfTransactions != null)
				return false;
		} else if (!originalNumberOfTransactions.equals(other.originalNumberOfTransactions))
			return false;
		if (originalPaymentInstructionId == null) {
			if (other.originalPaymentInstructionId != null)
				return false;
		} else if (!originalPaymentInstructionId.equals(other.originalPaymentInstructionId))
			return false;
		if (paymentAmount == null) {
			if (other.paymentAmount != null)
				return false;
		} else if (!paymentAmount.equals(other.paymentAmount))
			return false;
		if (paymentCurrency == null) {
			if (other.paymentCurrency != null)
				return false;
		} else if (!paymentCurrency.equals(other.paymentCurrency))
			return false;
		if (rejectReasonCode == null) {
			if (other.rejectReasonCode != null)
				return false;
		} else if (!rejectReasonCode.equals(other.rejectReasonCode))
			return false;
		if (transactionStatus == null) {
			if (other.transactionStatus != null)
				return false;
		} else if (!transactionStatus.equals(other.transactionStatus))
			return false;
		return true;
	}

	@Override
	public String toString() {
		return "MessageStatusReport [messageStatusReportId=" + messageStatusReportId + ", creationDateTime="
				+ creationDateTime + ", paymentAmount=" + paymentAmount + ", paymentCurrency=" + paymentCurrency
				+ ", originalMessageId=" + originalMessageId + ", originalPaymentInstructionId="
				+ originalPaymentInstructionId + ", originalMessageType=" + originalMessageType
				+ ", originalMessageCreationDateTime=" + originalMessageCreationDateTime
				+ ", originalNumberOfTransactions=" + originalNumberOfTransactions + ", transactionStatus="
				+ transactionStatus + ", rejectReasonCode=" + rejectReasonCode + ", acceptanceDateTime="
				+ acceptanceDateTime + ", debtorId=" + debtorId + ", creditorId=" + creditorId + "]";
	}

}
